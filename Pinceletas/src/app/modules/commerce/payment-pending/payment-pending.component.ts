import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { PedidoService } from '../../../services/pedido.service';

@Component({
  selector: 'app-payment-pending',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './payment-pending.component.html',
  styleUrl: './payment-pending.component.css'
})
export class PaymentPendingComponent implements OnInit{
  procesando = true;
  preferenceId: string | null = null;
  paymentId: string | null = null;
  numeroPedido: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private pedidoService: PedidoService
  ) {}

  ngOnInit(): void {
    console.log('‚è≥ Pago pendiente de confirmaci√≥n');
    
    // Capturar par√°metros de Mercado Pago
    this.route.queryParams.subscribe(params => {
      console.log('üìã Par√°metros recibidos:', params);

      this.preferenceId = params['preference_id'] || params['pref_id'];
      this.paymentId = params['payment_id'];
      this.numeroPedido = params['external_reference'];

      console.log('üîç Datos extra√≠dos:');
      console.log('  - Preference ID:', this.preferenceId);
      console.log('  - Payment ID:', this.paymentId);
      console.log('  - N√∫mero de Pedido:', this.numeroPedido);

      if (this.paymentId) {
        // Notificar al backend que el pago est√° pendiente
        this.notificarPagoPendiente();
      } else {
        this.procesando = false;
      }
    });
  }

  /**
   * Notifica al backend que el pago est√° pendiente
   */
  private notificarPagoPendiente(): void {
    console.log('üîî Notificando al backend sobre pago pendiente...');

    this.pedidoService.procesarWebhookPago(
      this.preferenceId || '', 
      this.paymentId || '', 
      'pending' // Estado pendiente
    ).subscribe({
      next: () => {
        console.log('‚úÖ Backend notificado sobre pago pendiente');
        this.procesando = false;
      },
      error: (error) => {
        console.error('‚ùå Error notificando backend:', error);
        // Aunque falle, continuar mostrando la p√°gina
        this.procesando = false;
      }
    });
  }

  verMisPedidos(): void {
    this.router.navigate(['/mis-pedidos']);
  }

  volverAProductos(): void {
    this.router.navigate(['/productlist']);
  }

  /**
   * Refresca el estado del pedido
   */
  verificarEstado(): void {
    if (!this.numeroPedido) {
      console.warn('‚ö†Ô∏è No hay n√∫mero de pedido para verificar');
      this.verMisPedidos();
      return;
    }

    console.log('üîÑ Verificando estado del pedido:', this.numeroPedido);
    
    this.pedidoService.obtenerPedidoPorNumero(this.numeroPedido).subscribe({
      next: (pedido) => {
        console.log('üì¶ Estado del pedido:', pedido.estado);
        
        if (pedido.estado === 'PAGADO') {
          console.log('‚úÖ Pago confirmado, redirigiendo...');
          this.router.navigate(['/mis-pedidos']);
        } else if (pedido.estado === 'CANCELADO') {
          console.log('‚ùå Pago cancelado, redirigiendo...');
          this.router.navigate(['/payment/failure']);
        } else {
          console.log('‚è≥ Pago a√∫n pendiente');
          alert('Tu pago a√∫n est√° siendo procesado. Por favor verifica en unos minutos.');
        }
      },
      error: (error) => {
        console.error('‚ùå Error verificando estado:', error);
        alert('No se pudo verificar el estado del pedido. Por favor contacta a soporte.');
      }
    });
  }
}
