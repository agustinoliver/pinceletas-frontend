import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MercadoPagoService {

  // üß™ Configuraci√≥n de modo de prueba
  private readonly TEST_MODE = true; // Cambiar a false en producci√≥n

  constructor() { }

  /**
   * Redirige al usuario a Mercado Pago Checkout
   * @param checkoutUrl - URL del checkout (initPoint o sandboxInitPoint)
   */
  redirectToMercadoPago(checkoutUrl: string): void {
    if (!checkoutUrl) {
      console.error('‚ùå No se recibi√≥ URL de checkout de Mercado Pago');
      throw new Error('URL de checkout no disponible');
    }

    console.log('üéØ Redirigiendo a Mercado Pago:', checkoutUrl);
    console.log('üß™ Modo de prueba:', this.TEST_MODE ? 'ACTIVADO' : 'DESACTIVADO');

    // ‚úÖ CR√çTICO: Abrir en una nueva pesta√±a/ventana en lugar de redirigir
    // Esto evita problemas con cookies y storage
    const nuevaVentana = window.open(checkoutUrl, '_blank');
    
    if (!nuevaVentana) {
      // Si el navegador bloque√≥ el popup, intentar redirecci√≥n normal
      console.warn('‚ö†Ô∏è Popup bloqueado, usando redirecci√≥n normal');
      window.location.href = checkoutUrl;
    } else {
      console.log('‚úÖ Mercado Pago abierto en nueva pesta√±a');
    }
  }

  /**
   * Selecciona autom√°ticamente la URL correcta seg√∫n el modo
   * @param initPoint - URL de producci√≥n
   * @param sandboxInitPoint - URL de prueba (sandbox)
   * @returns La URL correcta seg√∫n el modo configurado
   */
  getCheckoutUrl(initPoint: string | undefined, sandboxInitPoint: string | undefined): string {
    if (this.TEST_MODE) {
      if (!sandboxInitPoint) {
        console.warn('‚ö†Ô∏è Modo prueba activo pero no hay sandboxInitPoint. Usando initPoint como fallback.');
        return initPoint || '';
      }
      console.log('üß™ Usando Sandbox Init Point para pruebas');
      return sandboxInitPoint;
    } else {
      if (!initPoint) {
        console.warn('‚ö†Ô∏è Modo producci√≥n activo pero no hay initPoint. Usando sandboxInitPoint como fallback.');
        return sandboxInitPoint || '';
      }
      console.log('üè≠ Usando Init Point para producci√≥n');
      return initPoint;
    }
  }

  /**
   * Verifica si la configuraci√≥n de Mercado Pago es v√°lida
   * @param initPoint - URL de producci√≥n
   * @param sandboxInitPoint - URL de prueba
   * @returns true si hay al menos una URL v√°lida
   */
  isValidConfiguration(initPoint: string | undefined, sandboxInitPoint: string | undefined): boolean {
    const hasValidUrl = Boolean(
      (initPoint && initPoint.trim() !== '') || 
      (sandboxInitPoint && sandboxInitPoint.trim() !== '')
    );
    
    if (!hasValidUrl) {
      console.error('‚ùå No se recibi√≥ ninguna URL v√°lida de Mercado Pago');
    }
    
    return hasValidUrl;
  }

  /**
   * Obtiene informaci√≥n sobre el modo actual
   */
  getMode(): { mode: 'test' | 'production', description: string } {
    return {
      mode: this.TEST_MODE ? 'test' : 'production',
      description: this.TEST_MODE 
        ? 'Modo de prueba (Sandbox) - Usar tarjetas de prueba'
        : 'Modo de producci√≥n - Usar tarjetas reales'
    };
  }

  /**
   * Procesa el checkout completo con validaci√≥n y redirecci√≥n
   * @param pedidoResponse - Respuesta del pedido con las URLs de MP
   */
  procesarCheckout(pedidoResponse: any): void {
    console.log('üì¶ Procesando checkout con respuesta:', pedidoResponse);
    console.log('üìä Datos completos:', JSON.stringify(pedidoResponse, null, 2));

    const { initPoint, sandboxInitPoint } = pedidoResponse;

    // ‚úÖ CR√çTICO: Validar que tengamos al menos una URL
    if (!this.isValidConfiguration(initPoint, sandboxInitPoint)) {
      console.error('‚ùå Error: No hay URLs de pago disponibles');
      console.error('InitPoint:', initPoint);
      console.error('SandboxInitPoint:', sandboxInitPoint);
      throw new Error('No se pudo obtener la URL de pago de Mercado Pago. Por favor, contacta a soporte.');
    }

    // Obtener la URL correcta seg√∫n el modo
    const checkoutUrl = this.getCheckoutUrl(initPoint, sandboxInitPoint);

    if (!checkoutUrl || checkoutUrl.trim() === '') {
      console.error('‚ùå URL de checkout vac√≠a despu√©s de la selecci√≥n');
      throw new Error('URL de pago inv√°lida');
    }

    // Log de informaci√≥n
    const modeInfo = this.getMode();
    console.log(`üéØ Modo actual: ${modeInfo.mode} - ${modeInfo.description}`);
    console.log('üîó URL seleccionada:', checkoutUrl);
    console.log('üìã Preference ID:', pedidoResponse.preferenciaIdMp);

    // ‚úÖ MEJORADO: Delay m√°s corto y con mejor manejo
    console.log('‚è≥ Esperando 300ms antes de redirigir...');
    
    setTimeout(() => {
      try {
        this.redirectToMercadoPago(checkoutUrl);
      } catch (error) {
        console.error('‚ùå Error en la redirecci√≥n:', error);
        throw error;
      }
    }, 300); // Reducido de 500ms a 300ms
  }
}